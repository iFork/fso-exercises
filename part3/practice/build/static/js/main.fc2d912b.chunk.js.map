{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","props","note","toggleImportance","label","important","className","content","type","onClick","Notification","message","Footer","style","color","fontSize","fontStyle","baseUrl","axios","get","then","response","data","concat","id","date","newNoteObj","post","changedNoteObj","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","err","setTimeout","onSubmit","event","preventDefault","target","Date","toISOString","Math","random","name","value","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc2d912b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = (props) => {\n    const {note, toggleImportance} = props;\n    const label = note.important ? \"Make not important\" : \"Make important\";\n    return (\n        <li className=\"note\">\n            {note.content}  \n            <button type=\"button\" onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n}\n\n// export { Note as default };\nexport default Note;\n\n","import React from 'react';\n\nconst Notification = ({message}) => {\n    if (!message) {\n        return null;\n    }\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    );\n}\n\nexport default Notification;\n","import React from 'react';\n\nconst Footer = () => {\n    const footerStyle = {\n            color: 'green',\n            fontSize: 16,\n            fontStyle: 'italic'\n        };\n    return (\n        <div style={footerStyle}>\n            <br/>\n            <em>Note app, Department of Computer Science.</em>\n        </div>\n    );\n}\n\nexport default Footer;\n","import axios from 'axios';\n\n// json-server endpoint\n// const baseUrl = \"http://localhost:3001/notes\";\n// our local endpoint\n// const baseUrl = \"http://localhost:3001/api/notes\";\n// heroku endpoint\nconst baseUrl = \"https://young-mesa-19211.herokuapp.com/api/notes\";\nconst getAll = () => {\n    return axios.get(baseUrl)\n                .then(response => response.data)\n                .then(response => response.concat({id: 200, content: \"NON-existant note\", \n                                        date: \"2020\", important: true}))\n}\n\nconst create = (newNoteObj) => {\n    return axios.post(baseUrl, newNoteObj)\n                .then(response => response.data);\n            //obj is stringified and content type is set by axios\n}\n\nconst update = (id, changedNoteObj) => {\n    return axios.put(`${baseUrl}/${id}`, changedNoteObj)\n                .then(response => response.data);\n}\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect} from 'react';\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState(\"a new note...\");\n    const [showAll, setShowAll] = useState(true);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    const hook = () => {\n        console.log(\"Effect\");\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                console.log(\"response is:\", initialNotes);\n                setNotes(initialNotes);\n            });\n    }\n\n    // hook();\n    useEffect(hook, [])\n    console.log(\"render\", notes.length, \"notes\");\n\n    const notesToShow = showAll \n        ? notes \n        : notes.filter(note => note.important);\n\n    const addNote = (event) => {\n        event.preventDefault();\n        console.log(\"addNote called w/ event:\", event.target);\n        const newNoteObj =\n            {\n                // id: notes.length + 1,\n                // NOTE: Q: Why keeping `id` breaks subsequent posts after initial success\n                // Does json-server enforce uniqueness on `id`s and `.length` is loosing uniqueness\n                // as we are note updating state? Yes, Correct!!\n                // > omit the *id* property, since it's better to let the server generate ids for our resources\n                content: newNote,\n                date: new Date().toISOString(),\n                important: Math.random() > 0.5\n            };\n        noteService\n            .create(newNoteObj) \n            .then(returnedNote => {\n                console.log(\"post fulfilled, response is\", returnedNote);\n                setNotes(notes.concat(returnedNote));   \n            });\n        setNewNote('');\n        \n    }\n\n    const handleNoteChange = (event) => {\n        console.log(\"handleChange called w/ event:\", event.target); \n        setNewNote(event.target.value);\n    }\n    const toggleImportance = (id) => {\n        console.log(`toggle importance of ${id}'th note`);\n        const note = notes.find(n => n.id === id);\n        const changedNote = {...note, important: !note.important};\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => \n                setNotes(notes.map(note => note.id === id ? returnedNote : note)))\n            .catch(err => {\n                console.log(\"failed w/ error:\", err);\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from the server`);\n                setTimeout(() => setErrorMessage(null), 5000);\n                // alert(`Note \"${note.content}\" already has been deleted from the server`);\n                setNotes(notes.filter(note => note.id !== id));\n            })\n    }\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <button type=\"button\" onClick={() => setShowAll(!showAll)}>\n                Show {showAll ? \"Important\" : \"All\"}\n            </button>\n            <ul>\n                { notesToShow.map(note => \n                    <Note \n                        key={note.id} \n                        note={note} \n                        toggleImportance={() => toggleImportance(note.id)} />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <label>Note:</label>\n                {/* <label for=\"note_title\">Note:</label> */}\n                {/* FIXME: Warning: Invalid DOM property `for`. */}\n                <input type=\"text\" id=\"note_title\" name=\"note_title\" \n                    value={newNote}\n                    // defaultValue={newNote} // NOTE: field is editable, but\n                                            // edits do not pass to e.target.value\n                    onChange={handleNoteChange}/>\n                <button type=\"submit\">Add Note</button>\n            </form>\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n\n\nReactDOM.render(\n      <App />,\n      document.getElementById('root')\n);\n\n"],"sourceRoot":""}